// Apply the Java plugin
apply plugin: 'java'

// Use Maven (because Burp Extender is on Maven)
repositories {
    mavenCentral()
}

dependencies {
    // Add the Burp Extender interface
    // https://mvnrepository.com/artifact/net.portswigger.burp.extender/burp-extender-api
    compile group: 'net.portswigger.burp.extender', name: 'burp-extender-api', version: '2.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.6'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-exec
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'

    // https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc
    // Adds almost 6 MBs to the final jar file :(
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.30.1'
}

sourceSets {
    main {
        java {
            // Set the source directory to "src"
            srcDir 'src'
            // Exclude 'resources'
            exclude 'resources/'
        }
    }
    main {
        resources {
            // Set the resource directory to "src/resources"
            srcDir 'src/resources'
        }
    }
}

// Constants
libsDirName = '../release' // Put the final jar file in a different location
final browserSecurityURL = "https://semgrep.dev/c/r/javascript.browser.security"
final rulesDirectory = "semgrep-rules"
final browserSecurityFileName = "javascript.browser.security.yml"
final pipInstallCmd = ['python3', '-m', 'pip', 'install', 'semgrep', 'jsbeautifier']
final semgrepCmd = 'semgrep'
final jsbeautifyCmd = 'js-beautify'

// Helper functions

// OS Detection. Source: https://stackoverflow.com/a/54315477
import org.apache.tools.ant.taskdefs.condition.Os       

private static Iterable<String> osAdaptiveCommand(String... commands) {
    def newCommands = []
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        newCommands = ['cmd', '/c']
    }

    newCommands.addAll(commands)
    return newCommands
}

// ZZZ modified for Semgrep, run as WSL if on Windows
private static Iterable<String> runInWsl(String... commands) {
    def newCommands = []
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        newCommands = ['wsl']
    }

    newCommands.addAll(commands)
    return newCommands
}
// End of OS detection.

// Create a directory.
private static void createDir(String dirName) {
    File directory = new File(dirName)
    directory.mkdirs()
}

// Download a file from url and store it in path.
private static void downloadFile(String url, String path) {
    URL downloadURL = new URL(url)
    ReadableByteChannel chnl = Channels.newChannel(downloadURL.openStream())
    FileOutputStream fos = new FileOutputStream(path)
    fos.getChannel().transferFrom(chnl, 0, Long.MAX_VALUE)
    chnl.close()
    fos.close()
}

// End of Helper functions

// Tasks

// Create a task for bundling all dependencies into a jar file.
task bigJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// Extend clean to delete release and the rules directory.
clean.doFirst {
    println 'Deleting the release directory'
    delete 'release'
    println 'Deleting the rules directory'
    delete rulesDirectory
}

// The install task.

// The install task will:
// 1. Build the extension jar.
// 2. Download the javascript.browser.security ruleset and store it in
//    `rulesDirectory/browserSecurityFileName`.
// 3. Install semgrep and jsbeautifier.

import java.net.URL
import java.io.File
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel

task install() {

    // 1. Build the project via gradle.
    dependsOn 'bigJar'

    // If these are not in doLast, they will be executed in the configuration
    // phase. AKA every time any task is run.
    // 2. Download and store the ruleset.
    doLast {
        // 2.1 Create the semgrep-rules directory.
        createDir(rulesDirectory)

        // 2.2 Download the javascript.browser.security ruleset and store it.
        downloadFile(browserSecurityURL, rulesDirectory + "/" + browserSecurityFileName)

        // 3.1 Install semgrep and jsbeautifer with pip.
        println 'Installing semgrep and jsbeautifier with pip.'
        exec {
            commandLine runInWsl(*pipInstallCmd)
        }
    }
}

import java.nio.file.Files
import java.nio.file.Paths

task config() {
    doLast {
        // Check if target was provided.
        // 1. Read a command-line parameter. This will be the project path.
        if (!project.hasProperty('target')) {
            // Return an error if target is not provided.
            println 'Please provide the target path in this format'
            println 'Relative path: `gradlew config -Ptarget=/relative/path/to/target'
            println 'Absolute path: `gradlew config -Ptarget=c:/absolute/path/to/target' 
            throw new GradleException('target parameter not provided')
        }


        String currentDir = System.properties['user.dir']
        // 2. Check if install has been called by checking for the existence of
        //    currentDir/rulesDirectory. If it's not there, return an error.
        if (Files.isDirectory(Paths.get(currentDir, rulesDirectory))) {
            println String.format('%s exists.', rulesDirectory)
        } else {
            throw new GradleException(String.format('`%s` does not exist, have you run `gradlew install`?', rulesDirectory))
        }

        // 3. Check if target is an absolute path.
        String targetDir = project.target
        File tar = new File(targetDir)
        if (!tar.isAbsolute()) {
            // If target is not absolute, concat target with the current working
            // directory and normalize it.
            targetDir = Paths.get(currentDir, targetDir).normalize()
        }
        // 4.1 Path to store extracted JavaScript files: `target/beautified`
        String beautified = Paths.get(targetDir, "beautified").toString().replace("\\", "/")

        // 4.2 Path to store the results: `target/linted`
        String linted = Paths.get(targetDir, "linted").toString().replace("\\", "/")

        // 4.3 Location of the target database: `target/eslinter.sqlite`
        String db = Paths.get(targetDir, "eslinter.sqlite").toString().replace("\\", "/")

        // 4.4 Path to the rules directory: `currentDir/rulesDirectory`
        String rulesDir = Paths.get(currentDir, rulesDirectory).toString().replace("\\", "/")

        // 5.0 Create the json file.
        String cfgStr = 
        """
{
    "beautified-javascript-path": "${beautified}",
    "lint-result-path": "${linted}",
    "database-path": "${db}",
    "rules-path": "${rulesDir}",
    "linter-command": "${semgrepCmd}",
    "jsbeautifier-command": "${jsbeautifyCmd}",
    "only-process-in-scope": false,
    "highlight": true,
    "debug": false,
    "process-tool-list": [
        "Proxy",
        "Scanner",
        "Repeater"
    ],
    "number-of-linting-threads": 3,
    "lint-timeout": 60,
    "number-of-request-threads": 10,
    "threadpool-timeout": 10,
    "lint-task-delay": 10,
    "update-table-delay": 5,
    "maximum-js-size": 0,
    "js-mime-types": [
        "application/javascript",
        "application/ecmascript",
        "application/x-ecmascript",
        "application/x-javascript",
        "text/javascript",
        "text/ecmascript",
        "text/javascript1.0",
        "text/javascript1.1",
        "text/javascript1.2",
        "text/javascript1.3",
        "text/javascript1.4",
        "text/javascript1.5",
        "text/jscript",
        "text/livescript",
        "text/x-ecmascript",
        "text/x-javascript",
        "script"
    ],
    "javascript-file-extensions": [
        "js",
        "javascript"
    ],
    "contains-javascript": [
        "text/html",
        "application/xhtml+xml"
    ],
    "removable-headers": [
        "If-Modified-Since",
        "If-None-Match"
    ]
}
        """

        File configFile = new File(Paths.get(currentDir, 'release/config.json').toString())
        configFile.write(cfgStr)

        println "Configuration finished."
        println "Results will be stored in ${targetDir.toString().toString().replace("\\", "/")}."
        println "Config file is stored at ${Paths.get(currentDir,'release/config.json').toString().replace("\\", "/")}."
        println "Add the extension jar file to Burp and start linting."

    }
}